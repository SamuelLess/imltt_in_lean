import IMLTT.untyped.AbstractSyntax
import IMLTT.untyped.Weakening
import IMLTT.untyped.Substitution
import IMLTT.untyped.proofs.Weakening
import IMLTT.untyped.proofs.Substitution
import IMLTT.untyped.proofs.Contexts
import IMLTT.untyped.proofs.Mixture

import IMLTT.typed.JudgmentsAndRules
import IMLTT.typed.proofs.Recursor
import IMLTT.typed.proofs.boundary.BoundaryIsCtx
import IMLTT.typed.proofs.admissable.WeakeningGeneral
import IMLTT.typed.proofs.admissable.SubstitutionGeneral

-- case IsEqualTypeUnitFormEq
-- ⊢ ∀ {n : Nat} {Γ : Ctx n},
--     Γ ctx →
--       Γ ctx →
--         ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--           (eqM : n = m + 1),
--           (Γ_1 ⊢ s ≡ s' ∶ S) →
--             (Γ_1 ⊢ s ∶ S) →
--               (Γ_1 ⊢ s' ∶ S) →
--                 eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                   eqM ▸ 𝟙 = T → eqM ▸ 𝟙 = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
-- case IsEqualTypeEmptyFormEq
-- ⊢ ∀ {n : Nat} {Γ : Ctx n},
--     Γ ctx →
--       Γ ctx →
--         ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--           (eqM : n = m + 1),
--           (Γ_1 ⊢ s ≡ s' ∶ S) →
--             (Γ_1 ⊢ s ∶ S) →
--               (Γ_1 ⊢ s' ∶ S) →
--                 eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                   eqM ▸ 𝟘 = T → eqM ▸ 𝟘 = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
-- case IsEqualTypePiFormEq
-- ⊢ ∀ {n : Nat} {Γ : Ctx n} {A A' : Tm n} {B B' : Tm (n + 1)},
--     Γ ⊢ A ≡ A' type →
--       Γ ⬝ A ⊢ B ≡ B' type →
--         (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--             (eqM : n = m + 1),
--             (Γ_1 ⊢ s ≡ s' ∶ S) →
--               (Γ_1 ⊢ s ∶ S) →
--                 (Γ_1 ⊢ s' ∶ S) →
--                   eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                     eqM ▸ A = T → eqM ▸ A' = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type) →
--           (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--               (eqM : n + 1 = m + 1),
--               (Γ_1 ⊢ s ≡ s' ∶ S) →
--                 (Γ_1 ⊢ s ∶ S) →
--                   (Γ_1 ⊢ s' ∶ S) →
--                     eqM ▸ Γ ⬝ A = Γ_1 ⬝ S ⊗ Δ →
--                       eqM ▸ B = T → eqM ▸ B' = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type) →
--             ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--               (eqM : n = m + 1),
--               (Γ_1 ⊢ s ≡ s' ∶ S) →
--                 (Γ_1 ⊢ s ∶ S) →
--                   (Γ_1 ⊢ s' ∶ S) →
--                     eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                       (eqM ▸ ΠA;B) = T → (eqM ▸ ΠA';B') = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
-- case IsEqualTypeSigmaFormEq
-- ⊢ ∀ {n : Nat} {Γ : Ctx n} {A A' : Tm n} {B B' : Tm (n + 1)},
--     Γ ⊢ A ≡ A' type →
--       Γ ⬝ A ⊢ B ≡ B' type →
--         (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--             (eqM : n = m + 1),
--             (Γ_1 ⊢ s ≡ s' ∶ S) →
--               (Γ_1 ⊢ s ∶ S) →
--                 (Γ_1 ⊢ s' ∶ S) →
--                   eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                     eqM ▸ A = T → eqM ▸ A' = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type) →
--           (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--               (eqM : n + 1 = m + 1),
--               (Γ_1 ⊢ s ≡ s' ∶ S) →
--                 (Γ_1 ⊢ s ∶ S) →
--                   (Γ_1 ⊢ s' ∶ S) →
--                     eqM ▸ Γ ⬝ A = Γ_1 ⬝ S ⊗ Δ →
--                       eqM ▸ B = T → eqM ▸ B' = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type) →
--             ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--               (eqM : n = m + 1),
--               (Γ_1 ⊢ s ≡ s' ∶ S) →
--                 (Γ_1 ⊢ s ∶ S) →
--                   (Γ_1 ⊢ s' ∶ S) →
--                     eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                       (eqM ▸ ΣA;B) = T → (eqM ▸ ΣA';B') = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
-- case IsEqualTypeIdenFormEq
-- ⊢ ∀ {n : Nat} {Γ : Ctx n} {a₁ a₂ A a₃ a₄ A' : Tm n},
--     Γ ⊢ A ≡ A' type →
--       (Γ ⊢ a₁ ≡ a₂ ∶ A) →
--         (Γ ⊢ a₃ ≡ a₄ ∶ A') →
--           (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--               (eqM : n = m + 1),
--               (Γ_1 ⊢ s ≡ s' ∶ S) →
--                 (Γ_1 ⊢ s ∶ S) →
--                   (Γ_1 ⊢ s' ∶ S) →
--                     eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                       eqM ▸ A = T → eqM ▸ A' = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type) →
--             (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (t T : Tm (m + 1))
--                 (eqM : n = m + 1),
--                 (Γ_1 ⊢ s ≡ s' ∶ S) →
--                   (Γ_1 ⊢ s ∶ S) →
--                     (Γ_1 ⊢ s' ∶ S) →
--                       eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                         eqM ▸ a₁ = t →
--                           eqM ▸ a₂ = t →
--                             eqM ▸ A = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ t⌈s/ₙleq⌉ ≡ t⌈s'/ₙleq⌉ ∶ T⌈s/ₙleq⌉) →
--               (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (t T : Tm (m + 1))
--                   (eqM : n = m + 1),
--                   (Γ_1 ⊢ s ≡ s' ∶ S) →
--                     (Γ_1 ⊢ s ∶ S) →
--                       (Γ_1 ⊢ s' ∶ S) →
--                         eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                           eqM ▸ a₃ = t →
--                             eqM ▸ a₄ = t →
--                               eqM ▸ A' = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ t⌈s/ₙleq⌉ ≡ t⌈s'/ₙleq⌉ ∶ T⌈s/ₙleq⌉) →
--                 ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--                   (eqM : n = m + 1),
--                   (Γ_1 ⊢ s ≡ s' ∶ S) →
--                     (Γ_1 ⊢ s ∶ S) →
--                       (Γ_1 ⊢ s' ∶ S) →
--                         eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                           (eqM ▸ a₁ ≃[A] a₃) = T →
--                             (eqM ▸ a₂ ≃[A'] a₄) = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
-- case IsEqualTypeUnivFormEq
-- ⊢ ∀ {n : Nat} {Γ : Ctx n},
--     Γ ctx →
--       Γ ctx →
--         ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--           (eqM : n = m + 1),
--           (Γ_1 ⊢ s ≡ s' ∶ S) →
--             (Γ_1 ⊢ s ∶ S) →
--               (Γ_1 ⊢ s' ∶ S) →
--                 eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                   eqM ▸ 𝒰 = T → eqM ▸ 𝒰 = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
-- case IsEqualTypeUnivElimEq
-- ⊢ ∀ {n : Nat} {Γ : Ctx n} {A A' : Tm n},
--     (Γ ⊢ A ≡ A' ∶ 𝒰) →
--       (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (t T : Tm (m + 1))
--           (eqM : n = m + 1),
--           (Γ_1 ⊢ s ≡ s' ∶ S) →
--             (Γ_1 ⊢ s ∶ S) →
--               (Γ_1 ⊢ s' ∶ S) →
--                 eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                   eqM ▸ A = t →
--                     eqM ▸ A' = t → eqM ▸ 𝒰 = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ t⌈s/ₙleq⌉ ≡ t⌈s'/ₙleq⌉ ∶ T⌈s/ₙleq⌉) →
--         ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--           (eqM : n = m + 1),
--           (Γ_1 ⊢ s ≡ s' ∶ S) →
--             (Γ_1 ⊢ s ∶ S) →
--               (Γ_1 ⊢ s' ∶ S) →
--                 eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                   eqM ▸ A = T → eqM ▸ A' = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
-- case IsEqualTypeTypeSymm
-- ⊢ ∀ {n : Nat} {Γ : Ctx n} {A A' : Tm n},
--     Γ ⊢ A ≡ A' type →
--       (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--           (eqM : n = m + 1),
--           (Γ_1 ⊢ s ≡ s' ∶ S) →
--             (Γ_1 ⊢ s ∶ S) →
--               (Γ_1 ⊢ s' ∶ S) →
--                 eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                   eqM ▸ A = T → eqM ▸ A' = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type) →
--         ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--           (eqM : n = m + 1),
--           (Γ_1 ⊢ s ≡ s' ∶ S) →
--             (Γ_1 ⊢ s ∶ S) →
--               (Γ_1 ⊢ s' ∶ S) →
--                 eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                   eqM ▸ A' = T → eqM ▸ A = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
-- case IsEqualTypeTypeTrans
-- ⊢ ∀ {n : Nat} {Γ : Ctx n} {A B C : Tm n},
--     Γ ⊢ A ≡ B type →
--       Γ ⊢ B ≡ C type →
--         (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--             (eqM : n = m + 1),
--             (Γ_1 ⊢ s ≡ s' ∶ S) →
--               (Γ_1 ⊢ s ∶ S) →
--                 (Γ_1 ⊢ s' ∶ S) →
--                   eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                     eqM ▸ A = T → eqM ▸ B = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type) →
--           (∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--               (eqM : n = m + 1),
--               (Γ_1 ⊢ s ≡ s' ∶ S) →
--                 (Γ_1 ⊢ s ∶ S) →
--                   (Γ_1 ⊢ s' ∶ S) →
--                     eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                       eqM ▸ B = T → eqM ▸ C = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type) →
--             ∀ (m l : Nat) {leq : l ≤ m} (Γ_1 : Ctx l) (Δ : CtxGen (l + 1) (m + 1)) (s s' S : Tm l) (T : Tm (m + 1))
--               (eqM : n = m + 1),
--               (Γ_1 ⊢ s ≡ s' ∶ S) →
--                 (Γ_1 ⊢ s ∶ S) →
--                   (Γ_1 ⊢ s' ∶ S) →
--                     eqM ▸ Γ = Γ_1 ⬝ S ⊗ Δ →
--                       eqM ▸ A = T → eqM ▸ C = T → Γ_1 ⊗ ⌈s⌉(Δ w/Nat.le_refl l) ⊢ T⌈s/ₙleq⌉ ≡ T⌈s'/ₙleq⌉ type
